/* let indicator_selected = IndiValidate {
    validate: HashMap::from([(
        String::from("ORCL"),
        HashMap::from([(proto::IndicatorType::BollingerBands, 0.1)]),
    )]),
}; */

/* async fn decision_point(
    self: Arc<Self>,
    conf: &TraderConf,
    df: DataFrame,
) -> Result<(), CLIError> {
    let data_close = data_select_column1(df, "Close")?;
    let indicate = self
        .clone()
        .grpc(conf.indicator[0], conf.symbol.clone(), data_close)
        .await;

    //TODO add dates
    //let indicator_selected = vec![proto::IndicatorType::BollingerBands];
    let desc = desision_maker(indicate, conf.indicator.clone());
    let ae = action_evaluator(conf.symbol.clone(), desc);
    match ae.action {
        Action::Buy => stock_buy(ae).await,
        Action::Sell => stock_sell(ae).await,
        _ => todo!(),
    }
} */
